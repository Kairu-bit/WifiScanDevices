import ora from"ora";import inquirer from"inquirer";import{exec}from"child_process";import{isIPv4}from"net";import colors from"colors";const question=[{type:"input",name:"ipv4",message:"IPv4 Network (q to quit) :",validate:ipv4=>{if(ipv4.toLowerCase()==="q"){process.exit()}else if(!isIPv4(ipv4)||ipv4.trim()===""){return"IPv4 Network Error"}return true}}];function wait(ms){return new Promise(resolve=>setTimeout(resolve,ms))}async function animate(text,color="green"){const cleanedText=colors.strip(text);for(const char of cleanedText){await wait(25);process.stdout.write(colors[color]["bold"](char))}}const wifiScanDevices=ipv4=>{const command=`nmap -sn ${ipv4}`;const spinner=ora({spinner:"simpleDots",interval:60,color:"green",prefixText:colors.green.bold("\nScanning WiFi Devices")}).start();exec(command,{encoding:"utf-8"},(error,output,stderr)=>{if(error){spinner.stop();console.error(colors.red.bold(stderr.toString()));return}const devices=output.match(/Nmap scan report for .*?\n/g)||[];spinner.stop();console.log(colors.green.bold(`\nWiFi Scan Complete ó°„² \n`));devices.forEach(async(device,index)=>{await wait((index+1)*1500);device=device.concat(" ");const IPv4Devices=device.slice(21,-1);await animate(colors.green.bold(`Device ${index+1}: ${IPv4Devices}`),"red")})})};function getUserInput(){inquirer.prompt(question).then(wlan=>{wlan["ipv4"]=wlan["ipv4"].concat("/24");wifiScanDevices(wlan["ipv4"])})}getUserInput();
